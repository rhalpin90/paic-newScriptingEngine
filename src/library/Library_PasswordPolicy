var MAX_LENGTH;
var MIN_LENGTH;
var ALPHA_CHAR_COUNT;
var CAPITAL_CHAR_COUNT;
var NUMBER_CHAR_COUNT;
var CHAR_SET;
var REGEX;
var REGEX_ERROR;
var FIELDS_NOT_ALLOWED;
var DISALLOWED_CHARACTERS;
var POLICY_FOUND = false;

// Character Set for Password Policy Display, not actually used in password policy
var CHAR_SET_DISPLAY = String.fromCharCode(126, 33, 64, 35, 36, 37, 94, 38, 42, 40, 41, 45, 95, 61, 43, 91, 93, 123, 125, 124, 59, 58, 44, 46, 60, 62, 47, 63, 34, 39, 92, 96);
  
exports.getPasswordPolicy = function (title, openidm, logger) {
  // Load Password Policy from managed object
  var queryResult = openidm.query("managed/PasswordPolicy", {
    _queryFilter: `/title eq '${title}'`,
  });
  if (queryResult.resultCount > 0) {
    var results = queryResult.result;
    MAX_LENGTH = results[0].maxLength;
    MIN_LENGTH = results[0].minLength;
    ALPHA_CHAR_COUNT = results[0].alphaCharCount;
    CAPITAL_CHAR_COUNT = results[0].capitalCharCount;
    NUMBER_CHAR_COUNT = results[0].numberCharCount;
    CHAR_SET = results[0].charSet;
    FIELDS_NOT_ALLOWED = results[0].fieldsNotAllowed;
    DISALLOWED_CHARACTERS = results[0].disallowedCharacters;
    if (results[0].regex) {
      try {
        REGEX = new RegExp(results[0].regex, results[0].regexFlag);
        REGEX_ERROR = results[0].regexError;
      } catch(e) {
        logger.error("Error converting regex in managed object");
        logger.error(e);
      }
    }
    POLICY_FOUND = true;
  } else {
    logger.error("PasswordPolicyClass: Password policy '" + title + "' not found");
  }
};

exports.getMaxLength = function () {
  return MAX_LENGTH;
};

exports.getMinLength = function () {
  return MIN_LENGTH;
};

exports.getCapitalCharCount = function () {
  return CAPITAL_CHAR_COUNT;
};

exports.getNumberCount = function () {
  return NUMBER_CHAR_COUNT;
};

exports.getAlphaCharCount = function () {
  return ALPHA_CHAR_COUNT;
};

exports.getCharSet = function () {
  return CHAR_SET;
};

exports.getRegex = function () {
  return REGEX;
};

exports.getRegexError = function () {
  return REGEX_ERROR;
};

exports.getFieldsNotAllowed = function () {
  return FIELDS_NOT_ALLOWED;
};

exports.getDisallowedCharacters = function () {
  return DISALLOWED_CHARACTERS;
};

exports.getLengthPolicy = function () {
  return {
    policyRequirement: "LENGTH_BASED",
    params: {
      "max-password-length": MAX_LENGTH,
      "min-password-length": MIN_LENGTH,
    },
  };
};

exports.getCapitalCharPolicy = function () {
  return {
    params: { numCaps: CAPITAL_CHAR_COUNT },
    policyRequirement: "AT_LEAST_X_CAPITAL_LETTERS",
  };
};

exports.getNumberCharPolicy = function () {
  return {
    params: { numNums: NUMBER_CHAR_COUNT },
    policyRequirement: "AT_LEAST_X_NUMBERS",
  };
};

exports.getAlphaCharPolicy = function () {
  return {
    params: { numAlpha: ALPHA_CHAR_COUNT },
    policyRequirement: "AT_LEAST_X_LETTERS",
  };
}

exports.getCharacterSetPolicy = function () {
  return {
    policyRequirement: "CHARACTER_SET",
    params: {
      "allow-unclassified-characters": true,
      "character-set-ranges": [],
      "character-sets": ["0:" + CHAR_SET_DISPLAY],
      "min-character-sets": 1,
    },
  };
};

exports.getRegexPolicy = function () {
  return {
    policyRequirement: "MATCH_REGEXP",
    regexp: REGEX,
    params: {
      regexp: REGEX,
      flags: "g"
    }
  }
}

exports.getFieldsNotAllowedPolicy = function () {
  return {
    policyRequirement: "CANNOT_CONTAIN_OTHERS",
    params: {
      disallowedFields: FIELDS_NOT_ALLOWED
    }
  }
}

exports.getDisallowedCharactersPolicy = function () {
  return {
    policyRequirement: "CANNOT_CONTAIN_CHARACTERS",
    params: {
      forbiddenChars: DISALLOWED_CHARACTERS
    }
  };
};

exports.policyFound = function () {
  return POLICY_FOUND;
};